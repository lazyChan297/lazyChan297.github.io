(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{432:function(t,a,s){"use strict";s.r(a);var e=s(45),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"redux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" redux")]),t._v(" "),s("h2",{attrs:{id:"store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#store"}},[t._v("#")]),t._v(" store")]),t._v(" "),s("p",[t._v("储蓄状态的唯一数据源")]),t._v(" "),s("h3",{attrs:{id:"创建store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建store"}},[t._v("#")]),t._v(" 创建store")]),t._v(" "),s("p",[s("code",[t._v("createStore(reducer, applyMiddleware(...middles))")]),t._v("\n接受两个参数"),s("code",[t._v("reducer")]),t._v(" 和 "),s("code",[t._v("applyMiddleware(...middles)")]),t._v("中间件数组")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("reducer")]),t._v(" 是对象，对象里的属性是各种各样处理state变更的函数")]),t._v(" "),s("li",[s("code",[t._v("applyMiddleware")]),t._v(" 是 "),s("code",[t._v("redux")]),t._v("提供创建中间件的方法 它接受一个数组作为参数，数组里可以是引入的第三方库也可以自定义")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" applyMiddleware"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("createStore "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'redux'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStore")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reducer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("applyMiddleware")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("middles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"action"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" action")]),t._v(" "),s("p",[t._v("变更state的唯一方法。接受变更的值作为参数，返回值是一个对象，里面包含了它的type和要修改的对象的键值对")]),t._v(" "),s("ul",[s("li",[t._v("type，可以理解为action的name，例如说有一个action是修改动作 所以它的type是update，type是用来作为参数传入reducer的时候判断是哪种行为")]),t._v(" "),s("li",[t._v("value {key: value} key就是要修改的store里的key value就是新的值\nsuch as")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onStateChange")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO...")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            value\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"reducer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reducer"}},[t._v("#")]),t._v(" reducer")]),t._v(" "),s("p",[t._v("当"),s("code",[t._v("action")]),t._v("被触发后会自动的计算"),s("code",[t._v("state")]),t._v("的函数\n可以理解为 "),s("code",[t._v("action")]),t._v("负责的是提交动作和提交的值\n而reducer则根据提交的动作和提交的值对state进行处理\n但严格来说不是修改原有的state 而是返回一个新的值；当提交action后不需要手动调用"),s("code",[t._v("reducer")]),t._v("会自动触发\n"),s("code",[t._v("reducer")]),t._v("接收两个参数分别是 "),s("code",[t._v("state")]),t._v(" 和 "),s("code",[t._v("action")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("state")]),t._v(" store数据源")]),t._v(" "),s("li",[s("code",[t._v("action")]),t._v(" 是提交的动作\n返回是一个新的内存空间\nsuch as")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reducer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'onStateChange'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                theme"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onStateChange\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"react-redux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-redux"}},[t._v("#")]),t._v(" react-redux")]),t._v(" "),s("p",[t._v("在react or react-native项目中使用redux，推荐使用react-redux")]),t._v(" "),s("h3",{attrs:{id:"provider"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#provider"}},[t._v("#")]),t._v(" Provider")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("Provider")]),t._v("标签包裹根组件，将"),s("code",[t._v("store")]),t._v("注入到app框架中通过"),s("code",[t._v("props")]),t._v("传递到组件中\n"),s("code",[t._v("<Provider store={store}><App/></Provider>")]),t._v("\n被Provider包裹的组件 如果想要使用store中的数据，则该组件必须是被"),s("code",[t._v("connect")]),t._v("包装过的")]),t._v(" "),s("h3",{attrs:{id:"connect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connect"}},[t._v("#")]),t._v(" connect")]),t._v(" "),s("ul",[s("li",[t._v("引入\n"),s("code",[t._v("import {connect} from 'react-redux'")])]),t._v(" "),s("li",[t._v("使用")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mapStateToProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mapDispatchToProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mergeProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v("connect参数说明")]),t._v(" "),s("ul",[s("li",[t._v("mapStateToProps\n将store中的state数据传递到组件的props中，\n例如将store的count传递到某组件的props.count中"),s("code",[t._v("const mapStateToProps = state => {count: state.count}")])]),t._v(" "),s("li",[t._v("mapDispatchToProps\n将store中的action方法传递到组件的props中\n例如将store.action 中的onStateChange 传递到组件的props.func中 在组件中则可以通过 "),s("code",[t._v("this.props.func(value)")]),t._v("调用该方法\n"),s("code",[t._v("const mapDispatchToProps = dispatch => {func: value => dispatch(actions.onStateChange(value))}")])]),t._v(" "),s("li",[t._v("mergeProps\n将"),s("code",[t._v("mapStateToProps")]),t._v("或"),s("code",[t._v("mapDispatchToProps")]),t._v("的操作合并到组件的props中 通常这个参数不需要传递")])])]),t._v(" "),s("li",[s("p",[t._v("导出merge后的组件\n"),s("code",[t._v("export default connect(mapStateToProps)(ComponentName)")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);