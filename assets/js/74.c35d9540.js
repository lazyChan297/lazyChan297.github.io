(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{429:function(t,a,s){"use strict";s.r(a);var n=s(45),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"原生与js的通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原生与js的通信"}},[t._v("#")]),t._v(" 原生与js的通信")]),t._v(" "),s("h2",{attrs:{id:"通信原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通信原理"}},[t._v("#")]),t._v(" 通信原理")]),t._v(" "),s("p",[s("strong",[t._v("项目初始化")]),s("br")]),t._v(" "),s("ol",[s("li",[t._v("原生端通过遍历开发者自定义的原生模块和rn框架需要的原生模块，一起注册到原生模块映射表。同时定义需要用到的js接口到js模块映射表。\njs模块的接口只定义了模块名和方法名和入参，并不包含执行逻辑")]),t._v(" "),s("li",[t._v("原生端通过jsc将这两个映射表传递给js")]),t._v(" "),s("li",[t._v("js得到原生模块映射表，遍历该表把原生模仿挂载到nativeModule对象中；js得到js模块映射表，将所有的js模块实例注册到js模块映射表")])]),t._v(" "),s("p",[s("strong",[t._v("原生端向js通信")])]),t._v(" "),s("ol",[s("li",[t._v("初始化后，原生端通过查找js模块映射表，找到需要调用的模块名和方法名")]),t._v(" "),s("li",[t._v("将需要调用的信息传递给jsc，由jsc转发给js")]),t._v(" "),s("li",[t._v("js根据jsc传递过来的信息找到对应的模块名和方法名执行")])]),t._v(" "),s("p",[s("strong",[t._v("js向原生端发起通信")])]),t._v(" "),s("ol",[s("li",[t._v("通过初始化时得到的原生模块映射表，使用jsc转发需要调用的模块名和方法名")]),t._v(" "),s("li",[t._v("jsc将转发消息进一步发送给原生端，原生端执行对应的方法")]),t._v(" "),s("li",[t._v("根据定义的方法判断，如果需要回传和执行回调，则再由jsc将执行后的结果或回调id传给js")])]),t._v(" "),s("h2",{attrs:{id:"向js传递原生信息的几种方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向js传递原生信息的几种方案"}},[t._v("#")]),t._v(" 向js传递原生信息的几种方案")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("直接向原生模块发起通信\njs端通过"),s("code",[t._v("NativeModules.NativeInfoModule.getNativeInfo().then(info => {})")]),t._v("获取原生信息模块，\n但是期间js向原生发起通信运行的链路是很长的，如果需要将原生信息发起网络请求，那么很有可能还没获取到信息就已经发起请求")])]),t._v(" "),s("li",[s("p",[t._v("初始化根视图时把原生信息传递给props")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("putString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nativeInfo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nativeInfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    reactRootView"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("startReactApplication")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getReactNativeHost")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getReactManInstanceManager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("///")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这个方案会时页面初始化时就已经得到原生信息，不需要考虑时机问题，但是有一个弊端是如果项目有多个视图入口，\n那么需要在每一个"),s("code",[t._v("reactRootView")]),t._v("初始化时都携带原生信息，这样会增加一定的维护成本")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("通过"),s("code",[t._v("NativeEventEmitter")]),t._v("\n在js端注册监听器")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" emitter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NativeEventEmitter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NativeInfoModule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nemitter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'NativeInfoEvent'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("在原生端触发")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    reactInstanceManager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCurrentReactContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getJavaScriptModule")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'NativeInfoEvent'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nativeInfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("这个方法需要注意的是只有当js端注册了监听事件，原生端的触发才会回传到js中")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("将原生信息挂载到js的全局global对象下\n通过"),s("code",[t._v("setGlobalVariable")]),t._v("可以把对象挂载到global中")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onReactContextInitialzed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReactContext")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCatalystInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setGlobalVariable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'nativeInfo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nativeInfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这个方法是jsc桥接时就会把对象挂载，但是在浏览器调试时会导致global对象时undefined")])])}),[],!1,null,null,null);a.default=e.exports}}]);