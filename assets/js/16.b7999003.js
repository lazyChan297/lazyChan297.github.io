(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{370:function(t,a,v){"use strict";v.r(a);var r=v(45),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"http版本差异"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http版本差异"}},[t._v("#")]),t._v(" HTTP版本差异")]),t._v(" "),v("h2",{attrs:{id:"http1-0"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-0"}},[t._v("#")]),t._v(" HTTP1.0")]),t._v(" "),v("p",[t._v("每次发起请求时都需要重新建立一次连接，即三次握手流程，服务器处理完请求后立即断开连接。"),v("br"),t._v("\n如果需要保持连接需要手动设置"),v("code",[t._v("Connection:keep-alive")]),t._v("字段")]),t._v(" "),v("h2",{attrs:{id:"http1-1"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-1"}},[t._v("#")]),t._v(" HTTP1.1")]),t._v(" "),v("ul",[v("li",[t._v("将"),v("code",[t._v("Connection:keep-alive")]),t._v("设为标准，默认支持长连接，意味着在一个TCP连接中，可以传送多个HTTP请求和响应，减少了建立连接和关闭连接的消耗和延迟。")]),t._v(" "),v("li",[t._v("允许客户端不等待上一次请求的结果返回就可以发出下一个请求，但是服务器还是必须按照请求的先后依次响应")]),t._v(" "),v("li",[v("strong",[t._v("缓存方面")]),t._v(" 增加了If-Match、If-None-Match、If-Unmodified-Since缓存头控制缓存策略")]),t._v(" "),v("li",[v("strong",[t._v("range")]),t._v(" 支持请求服务器资源的某一部分，http状态码返回206")]),t._v(" "),v("li",[v("strong",[t._v("Host")]),t._v(" 当ip地址设置成多个不同的站点时，为了区分站点引入了host请求头")]),t._v(" "),v("li",[v("strong",[t._v("请求方法")]),t._v(" 增加了put、delete、options方法")])]),t._v(" "),v("h2",{attrs:{id:"http2-0"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[t._v("#")]),t._v(" HTTP2.0")]),t._v(" "),v("h3",{attrs:{id:"新特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#新特性"}},[t._v("#")]),t._v(" 新特性")]),t._v(" "),v("h4",{attrs:{id:"二进制传输"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二进制传输"}},[t._v("#")]),t._v(" 二进制传输")]),t._v(" "),v("p",[t._v("HTTP1.X中报文是以纯文本的格式传输的，HTTP2改为使用二进制编码传输，这样解析起来更高效"),v("br"),t._v("\n将请求和响应分割成若干个二进制帧，将原本报文的headers变为 "),v("code",[t._v("HEADER")]),t._v("帧，请求数据变为"),v("code",[t._v("DATA")]),t._v("帧，每一帧的首部有一个steamId，"),v("br"),t._v("\n一个或多个帧组成一条数据流，\n在HTTP2中一个链接可以承载任意数量的双向数据流，一个数据流(stream)由一个或多个帧组成，多个帧之间可以乱序发送，根据帧首部的streamId可以对消息重新组装")]),t._v(" "),v("h4",{attrs:{id:"header压缩"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#header压缩"}},[t._v("#")]),t._v(" header压缩")]),t._v(" "),v("p",[t._v("在客户端和服务器两端建立“首部表”，首部表存储之前请求发送过的键值对，对于相同的数据不用每次请求和响应都发送，缓存在首部表中"),v("br"),t._v("\n例如之前的请求使首部表已经缓存了"),v("code",[t._v("method")]),t._v(" "),v("code",[t._v("host")]),t._v(" "),v("code",[t._v("accept")]),t._v(" "),v("code",[t._v("user-agent")]),t._v("等头部字段，当下一次发起请求时只需要发送差异的部分，这样就可以减少冗余数据")]),t._v(" "),v("h4",{attrs:{id:"多路复用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[t._v("#")]),t._v(" 多路复用")]),t._v(" "),v("p",[t._v("因为有了二进制传输的基础，在一个tcp连接里客户端和服务器可以同时发送多个请求和响应而且不需要按照顺序一一等待，这样就可以避免HTTP队头阻塞。\n这样同一个域名只需要占用一个TCP连接，一个连接可以并行发送多个请求和响应")]),t._v(" "),v("h4",{attrs:{id:"server-push"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#server-push"}},[t._v("#")]),t._v(" server push")]),t._v(" "),v("p",[t._v("HTTP2改变了传统的“请求-应答”模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。比如，在浏览器刚请求HTML的时候就提前把可能会用到的JS、CSS文件发给客户端，减少等待的延迟。但是服务器推送的资源必须经过客户端的确认才可以被接收")]),t._v(" "),v("h4",{attrs:{id:"安全性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#安全性"}},[t._v("#")]),t._v(" 安全性")]),t._v(" "),v("p",[t._v("HTTP2出于兼容的考虑仍然可以使用http明文传输数据，但是主流的浏览器等已经公开宣布只支持加密的HTTP2")]),t._v(" "),v("h3",{attrs:{id:"存在的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#存在的问题"}},[t._v("#")]),t._v(" 存在的问题")]),t._v(" "),v("ol",[v("li",[t._v("由于HTTP2“默认”使用加密数据，所以建立TLS连接时也会有一个握手的过程")]),t._v(" "),v("li",[t._v("为了保证TCP数据传输的可靠性，当丢包的时候有触发"),v("code",[t._v("丢包重传")]),t._v("机制，这样TCP连接就会重新开始等待重传；然后HTTP1.X是建立多个tcp连接，所以只会影响其中一个tcp，当出现这种状况时1.x版本略优于2")])]),t._v(" "),v("h2",{attrs:{id:"http3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http3"}},[t._v("#")]),t._v(" HTTP3")]),t._v(" "),v("p",[t._v("基于2的缺点，新增了一个基于UDP协议的QUIC，该协议不需要三次握手和挥手，启动时间更快"),v("br"),t._v("\n实现了类似TCP的流量控制、传输可靠性的功能"),v("br"),t._v("\n集成了TLS加密功能"),v("br"),t._v("\n多路复用，彻底解决TCP中队头阻塞的问题"),v("br")])])}),[],!1,null,null,null);a.default=e.exports}}]);