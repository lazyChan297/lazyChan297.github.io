(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{427:function(e,s,_){"use strict";_.r(s);var a=_(45),v=Object(a.a)({},(function(){var e=this,s=e.$createElement,_=e._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"webpack"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),_("p",[e._v("webpack能够处理模块的加载顺序、模块之间的依赖关系、将各种文件类型的资源翻译、使模块化开发的维护工作变得简单。同时支持开发模式下热加载、生产环境的代码压缩合并、懒加载等功能。")]),e._v(" "),_("h2",{attrs:{id:"构建流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#构建流程"}},[e._v("#")]),e._v(" 构建流程")]),e._v(" "),_("p",[_("strong",[e._v("初始化")])]),e._v(" "),_("ul",[_("li",[e._v("从"),_("code",[e._v("shell语句中的参数")]),e._v("和"),_("code",[e._v("配置文件")]),e._v("中读取、合并配置参数得到"),_("code",[e._v("options")]),e._v("对象，该对象包含了入口/出口文件名和路径配置，plugins集合，module的转换规则，然后传入"),_("code",[e._v("options")]),e._v("作为参数，创建一个"),_("strong",[e._v("编译器")]),e._v("(webpack实例"),_("code",[e._v("complier")]),e._v(")，"),_("code",[e._v("编译器")]),e._v("调用插件的"),_("code",[e._v("apply")]),e._v("方法，在插件需要调用的生命周期勾子函数中注册插件函数执行")])]),e._v(" "),_("p",[_("strong",[e._v("编译")])]),e._v(" "),_("ul",[_("li",[_("code",[e._v("compile")]),e._v("执行"),_("code",[e._v("run")]),e._v("方法，正式开始编译，该方法会触发compile方法返回一个Complication对象，该对象负责组织整个构建环节的流程，包含了构建和输出文件所对应的方法，同时保存了所有module和chunk，生成的asset\n"),_("ul",[_("li",[_("code",[e._v("Complication.addEntry()")]),e._v("，该方法负责入口文件，接着调用内部的"),_("code",[e._v("_addModuleChian()")])])])])]),e._v(" "),_("p",[_("strong",[e._v("创建模块")])]),e._v(" "),_("ul",[_("li",[_("code",[e._v("_addModuleChian()")]),e._v("创建模块返回一个空的module对象，开始构建模块")])]),e._v(" "),_("p",[_("strong",[e._v("构建模块")])]),e._v(" "),_("ul",[_("li",[e._v("构建模块遇到不是"),_("code",[e._v(".js")]),e._v("或者"),_("code",[e._v(".json")]),e._v("文件时调用该文件类型配置的"),_("code",[e._v("Loader")]),e._v("，返回的是以字符串存储的js代码")]),e._v(" "),_("li",[e._v("调用acorn把loader返回的js代码解析成ast对象")]),e._v(" "),_("li",[e._v("遍历ast对象，遇到依赖其他模块时递归，重复创建模块的步骤，直到理清当前模块的依赖关系")])]),e._v(" "),_("p",[_("strong",[e._v("封装")])]),e._v(" "),_("p",[_("code",[e._v("seal")]),e._v("方法负责给每一个chunk绑定对应的module，一个chunk由一个或多个module组成，封装后得到一个个"),_("code",[e._v("chunk")]),e._v("对象，"),_("code",[e._v("chunk")]),e._v("里面包含了"),_("code",[e._v("module")]),e._v("中依赖的所有"),_("code",[e._v("module")])]),e._v(" "),_("p",[_("strong",[e._v("输出文件")])]),e._v(" "),_("p",[e._v("确定了chunk和module之间的绑定关系后调用"),_("code",[e._v("createChunkAssets")]),e._v("方法最终生成asset，该方法会把构建模块中的ast对象分析，最终得到可以在浏览器运行的代码输出到dist中")]),e._v(" "),_("h2",{attrs:{id:"loader"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[e._v("#")]),e._v(" Loader")]),e._v(" "),_("p",[e._v("webpack默认只能打包js或json文件，对于其它资源需要通过"),_("code",[e._v("Loader")]),e._v("对内容进行翻译使webpack支持")]),e._v(" "),_("p",[_("strong",[e._v("执行顺序")]),e._v(" 默认情况下是从右到左，从下往上。每个loader可以导出一个pitch函数，pitch的执行顺序与loader相反，pitch有返回值则不会再调用配置文件中剩余的loader；pitch没有返回值，继续调用右边的loader的pitch方法。")]),e._v(" "),_("p",[_("strong",[e._v("执行时机")]),e._v(" 对应的module构建模块时执行")]),e._v(" "),_("h3",{attrs:{id:"常用loader"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用loader"}},[e._v("#")]),e._v(" 常用loader")]),e._v(" "),_("ul",[_("li",[e._v("vue-loader 给"),_("code",[e._v(".vue")]),e._v("文件路径传入三个不同的参数，分别提取template、script、style内容对应转换")]),e._v(" "),_("li",[e._v("css-loader 处理js代码中的"),_("code",[e._v("import")]),e._v("和"),_("code",[e._v("url()")]),e._v("、"),_("code",[e._v("@import")]),e._v("、"),_("code",[e._v("require")]),e._v("，变为一段字符串形式的js代码")]),e._v(" "),_("li",[e._v("style-loader 将css-loader返回的js代码转换成真正的样式并以style标签挂载到html中")]),e._v(" "),_("li",[e._v("url-loader\n"),_("ul",[_("li",[e._v("处理css中的静态资源"),_("code",[e._v("url(path)")]),e._v("。假如没有使用该loader，会以当前打包好的文件为"),_("code",[e._v("chunk-xxx.yyy.css")]),e._v("所在的路径为起点根据path的值查找静态资源。如果使用了该loader，配置了publicPath就会以publicPath为根路径+path的值查找，如果没有就会以dist目录为起点根据path的值查找。静态资源所在的文件路径也会以publicPath+path的值打包到对应的文件路径下")]),e._v(" "),_("li",[e._v("转换文件格式为base64格式，同时可以设置阀值，对小于该阀值的文件转换大于的仅仅做url处理")])])]),e._v(" "),_("li",[e._v("file-loader 和url-loader一样可以指定文件输出的名字和路径，但是不能做base64转换")])]),e._v(" "),_("h2",{attrs:{id:"plugins"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#plugins"}},[e._v("#")]),e._v(" Plugins")]),e._v(" "),_("p",[e._v("丰富打包的功能，例如压缩，合并，体积分析，打包计时分析")]),e._v(" "),_("p",[_("strong",[e._v("执行时机")]),e._v(" 贯穿整个构建流程的生命周期，由webpack实例"),_("code",[e._v("complier")]),e._v("触发对应的生命周期执行")]),e._v(" "),_("h3",{attrs:{id:"常用plugins"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用plugins"}},[e._v("#")]),e._v(" 常用plugins")]),e._v(" "),_("ul",[_("li",[e._v("html-webpack-plugin 创建html文件，由"),_("code",[e._v("new HtmlWebpackPlugin()")]),e._v("创建实例返回")]),e._v(" "),_("li",[e._v("clean-webpack-plugin 清除构建产物")]),e._v(" "),_("li",[e._v("mini-css-extract-plugin 将css代码与js代码分离")]),e._v(" "),_("li",[e._v("compression-webpack-plugin 压缩代码")])]),e._v(" "),_("div",{staticClass:"language-javascript extra-class"},[_("pre",{pre:!0,attrs:{class:"language-javascript"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("compressionWebpackConfig")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    filename"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v("'[path][base].gz'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 输出的文件名")]),e._v("\n    algorithm"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v("'gzip'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    test"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("RegExp")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\\\.('")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v("'js|css'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[e._v("')$'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 匹配压缩的文件格式")]),e._v("\n    threshold"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[e._v("10240")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// threshold： 只有size大于该值的资源会被处理。单位是 bytes。默认值是 0。")]),e._v("\n    minRatio"),_("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.8")]),e._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// minRatio： 只有压缩率小于这个值的资源才会被处理。默认值是 0.8。")]),e._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),_("ul",[_("li",[e._v("copy-webpack-plugin 将工程中的文件复制到dist目录下，例如favicon.ico")])]),e._v(" "),_("h2",{attrs:{id:"热更新原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#热更新原理"}},[e._v("#")]),e._v(" 热更新原理")]),e._v(" "),_("ol",[_("li",[_("code",[e._v("webpack-dev-server")]),e._v("启动一个本地服务器并和浏览器之间建立了socket通信，保持长连接")]),e._v(" "),_("li",[e._v("webpack发送给浏览器两个文件，一个是代码打包后的js文件，以hash值命名；一个是json文件 {c: 文件路径,h: hash值}")]),e._v(" "),_("li",[e._v("当webpack监听到文件变化后重新向浏览器发送更新了hash值的json文件和新的打包文件")]),e._v(" "),_("li",[e._v("浏览器接收到新的文件后触发更新")])]),e._v(" "),_("h2",{attrs:{id:"文件指纹"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#文件指纹"}},[e._v("#")]),e._v(" 文件指纹")]),e._v(" "),_("p",[e._v("也就是打包后的文件名")]),e._v(" "),_("ul",[_("li",[e._v("hash: 和整个项目有关，只要项目有修改，hash值就会改变")]),e._v(" "),_("li",[e._v("Chunkhash: 和webpack打包的chunk有关，不同的entry会产生不同的chunkhash，js文件用chuankhash，这样做可以使浏览器js文件缓存生效")]),e._v(" "),_("li",[e._v("contenthash: 根据文件内容来定义hash，文件内容不变，hash不变，css文件（使用mini-css-extract-plugin分离打包)用contentHash，这样做css文件不受js文件改变影响导致缓存失效")])]),e._v(" "),_("h2",{attrs:{id:"路由懒加载实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路由懒加载实现原理"}},[e._v("#")]),e._v(" 路由懒加载实现原理")]),e._v(" "),_("p",[e._v("进入某一条路由时，浏览器才会向服务器请求该路由的js文件，该js文件是一个通过IIFE函数，该函数内部逻辑如下\n"),_("code",[e._v("webpackJsonp.push([[chunkId],{moduleId:编译后的js代码}])")])]),e._v(" "),_("p",[e._v("当请求该路由文件时会调用"),_("code",[e._v("__webpack__.require.e(chunkId)")]),e._v("函数，该函数会在全局对象"),_("code",[e._v("installedChunks")]),e._v("中添加键名为chunkId的属性，属性值是一个数组对象，值分别是promise对象的resolve方法、reject方法、promise对象，最后返回一个"),_("code",[e._v("Promise.all[promises]")]),e._v("对象")]),e._v(" "),_("p",[e._v("当请求到chunk-chunkId.js文件后"),_("code",[e._v("webpackJsonp.push")]),e._v("方法执行，"),_("code",[e._v("webpackJsonpCallback")]),e._v("触发，取出全局对象"),_("code",[e._v("installedChunks[该文件的chunkId]")]),e._v("数组对象的第一个元素也就是resolve方法，"),_("code",[e._v("__webpack__.require.e")]),e._v("函数返回的promise对象状态变为fulfilled，执行它的then回调")]),e._v(" "),_("p",[e._v("then回调函数是"),_("code",[e._v("__webpack_require__.bind(null, moduleId)")]),e._v("，该方法创建一个module对象，i的值是moduleId，exports属性是路由懒加载文件的js源代码，并把该module对象添加到全局的installedModules对象中，最后返回module.exports，路由懒加载完成\n"),_("RouterLink",{attrs:{to:"/engineering/RouterLazyLoading/"}},[e._v("路由懒加载详细源码")])],1),e._v(" "),_("h2",{attrs:{id:"优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[e._v("#")]),e._v(" 优化")]),e._v(" "),_("p",[e._v("记录一些在项目中在"),_("code",[e._v("webpack")]),e._v("层面做的优化")]),e._v(" "),_("ul",[_("li",[e._v("升级了vue-cli版本到3和webpack版本到4\n"),_("ul",[_("li",[_("code",[e._v("vue-cli3")]),e._v("默认使用了"),_("code",[e._v("hashedModuleIdsPlugin")]),e._v("和"),_("code",[e._v("NamedChunksPlugin")]),e._v("解决了增加一个模块使它后面的moduleId和chunkName也被改变导致乱序，缓存失效的问题")]),e._v(" "),_("li",[_("code",[e._v("webpack4")]),e._v("提供了默认的拆包的能力，更好的利用缓存持久化")])])]),e._v(" "),_("li",[e._v("减少http网络请求\n"),_("ul",[_("li",[e._v("将小于100kb的图片使用"),_("code",[e._v("url-loader")]),e._v("转换成"),_("code",[e._v("base64")]),e._v("格式文件")]),e._v(" "),_("li",[e._v("对运行时文件"),_("code",[e._v("runtime")]),e._v("使用内联引入，因为该文件体积较小且变动频繁")])])]),e._v(" "),_("li",[e._v("提高页面渲染速度，\n"),_("ul",[_("li",[e._v("因为项目是管理后台且页面较多没有明确的下一个会打开的页面且固定哪一个频率较高，所选择关闭"),_("code",[e._v("vue-cli3")]),e._v("默认开启的预加载，减少不必要的带宽浪费")]),e._v(" "),_("li",[e._v("同时使用了"),_("code",[e._v("script-ext-html-webpack-plugin")]),e._v("对html文件中文件加载的方式进行修改\n"),_("ul",[_("li",[_("code",[e._v("app.css")]),e._v("和"),_("code",[e._v("chunk-libs.css")]),e._v("开启预加载")]),e._v(" "),_("li",[_("code",[e._v("app.js")]),e._v("和"),_("code",[e._v("chunk-libs.js")]),e._v("开启async异步加载")])])])])]),e._v(" "),_("li",[e._v("体积优化\n"),_("ul",[_("li",[e._v("将js和css压缩成"),_("code",[e._v("gzip")]),e._v("格式，"),_("code",[e._v("nginx")]),e._v("配置支持"),_("code",[e._v("gzip")]),e._v("格式解码")])])]),e._v(" "),_("li",[e._v("构建效率优化\n"),_("ul",[_("li",[_("code",[e._v("babel-loader")]),e._v("只对"),_("code",[e._v("src")]),e._v("下的开发代码编译")])])]),e._v(" "),_("li",[e._v("缓存持久化\n"),_("ul",[_("li",[e._v("开启"),_("code",[e._v("config.optimization.runtimeChunk('single')")]),e._v("，使入口文件"),_("code",[e._v("app.js")]),e._v("构建后的文件名不随着异步加载的组件更新而更新")])])]),e._v(" "),_("li",[e._v("拆包\n"),_("ul",[_("li",[e._v("将项目中引入的"),_("code",[e._v("element-ui")]),e._v("打包成一个独立的js文件，因为它体积较大引入（最小的压缩后也有200多kb）且变更频率较低，结合缓存持久化将它拆分成一个独立的文件")]),e._v(" "),_("li",[e._v("将来自于"),_("code",[e._v("node_modules")]),e._v("的文件打包成独立的js文件")]),e._v(" "),_("li",[e._v("将很多页面都使用的公共组件打包到一个公共的js文件"),_("code",[e._v("chunk-common.js")])]),e._v(" "),_("li",[e._v("业务组件全部使用懒加载")])])])]),e._v(" "),_("h2",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),_("ol",[_("li",[_("a",{attrs:{href:"https://developer.aliyun.com/article/61047",target:"_blank",rel:"noopener noreferrer"}},[e._v("细说webpack之流程篇"),_("OutboundLink")],1)]),e._v(" "),_("li",[_("a",{attrs:{href:"https://segmentfault.com/a/1190000015919928",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack4拆包相关"),_("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=v.exports}}]);