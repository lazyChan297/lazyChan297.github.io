(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{398:function(t,e,s){"use strict";s.r(e);var n=s(45),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"generator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generator"}},[t._v("#")]),t._v(" Generator")]),t._v(" "),s("p",[t._v("异步编程解决方案之一")]),t._v(" "),s("h2",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("p",[s("strong",[t._v("声明")]),t._v(" "),s("code",[t._v("function* gen(){}")]),t._v(" 用*表示该函数是generator函数")]),t._v(" "),s("p",[s("strong",[t._v("返回值")]),t._v(" 是一个遍历器对象，该对象具备以下三个方法")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("next(v)")]),t._v(" 执行第N个"),s("code",[t._v("yield")]),t._v("表达式，传入的参数替代上一个"),s("code",[t._v("yield")]),t._v("表达式返回的值")]),t._v(" "),s("li",[s("strong",[t._v("throw(error)")]),t._v(" 可以在"),s("code",[t._v("generator")]),t._v("函数抛出错误，在"),s("code",[t._v("generator")]),t._v("函数内部用"),s("code",[t._v("try catch")]),t._v("代码块捕获")]),t._v(" "),s("li",[s("strong",[t._v("return(v)")]),t._v(" 终结"),s("code",[t._v("generator")]),t._v("函数的遍历，传入的值就是返回对象中value的值，"),s("code",[t._v("done")]),t._v("属性会变为"),s("code",[t._v("true")]),t._v("，此后再调用"),s("code",[t._v("next")]),t._v("方法返回值都是已结束状态的返回值")])]),t._v(" "),s("p",[s("strong",[t._v("yield表达式")]),t._v(" 控制函数执行暂停的表达式，当函数体内遇到"),s("code",[t._v("yield")]),t._v("表达式时，后续的代码会暂停执行\n"),s("strong",[t._v("yield表达式的返回值")]),t._v(" 数据结构 "),s("code",[t._v("{value, done}")]),t._v("，value是表达式后的函数返回的值or变量值本身；done是布尔值 表示是否函数体内的yield执行完毕")]),t._v(" "),s("p",[s("strong",[t._v("next")]),t._v(" "),s("code",[t._v("generator")]),t._v("函数返回的对象具备"),s("code",[t._v("next")]),t._v("方法，该方法作用是把"),s("code",[t._v("yield")]),t._v("表达式替换成一个"),s("code",[t._v("next(value)")]),t._v("传入的参数，如果没有则替换成undefined。")]),t._v(" "),s("ul",[s("li",[t._v("第n次调用对应函数体内的第n个"),s("code",[t._v("yield")])]),t._v(" "),s("li",[t._v("第大于n+1次执行"),s("code",[t._v("next")]),t._v("，会返回value是undefined，done是true的对象")])]),t._v(" "),s("p",[s("strong",[t._v("传参")]),t._v(" 因为"),s("code",[t._v("next")]),t._v("传入的参数是代替上一次"),s("code",[t._v("yield")]),t._v("表达式返回的值，所以第一次调用"),s("code",[t._v("next")]),t._v("时是被浏览器忽略的，因为此前并没有"),s("code",[t._v("yield")]),t._v("表达式执行")]),t._v(" "),s("p",[t._v("使用一个例子来说明")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" z\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {value: 5+1, done: false}")]),t._v("\n    s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为next参数为空，所以上一个yield表达式x+1的返回值y为undefined/3 = NaN, {value: undefined/3, done: false}, ")]),t._v("\n    s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为next参数为空，所以上一个yield表达式x+1的返回值z为undefined+NaN+x, {value: undefined+NaN+x, done: true}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("this指向")]),t._v(" 因为"),s("code",[t._v("generator")]),t._v("函数的返回值总是它的遍历器对象，如果把返回值当成普通函数调用时要注意this是指向不到遍历器对象的")]),t._v(" "),s("p",[s("strong",[t._v("遍历执行")]),t._v(" 可以使用"),s("code",[t._v("for.of.")]),t._v("自动执行遍历器，因为该函数返回值具有"),s("code",[t._v("Iterator")]),t._v("接口，这样就不需要调用next方法，当"),s("code",[t._v("done")]),t._v("属性变为true时会自行停止，"),s("code",[t._v("for.of")]),t._v("后面的代码不会再执行")])])}),[],!1,null,null,null);e.default=a.exports}}]);