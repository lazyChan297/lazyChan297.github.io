(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{426:function(e,v,_){"use strict";_.r(v);var i=_(45),t=Object(i.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"超越git基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#超越git基础"}},[e._v("#")]),e._v(" 超越Git基础")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("push & fetch & pull")])]),e._v(" "),_("li",[_("p",[e._v("fetch")])])]),e._v(" "),_("p",[e._v("该命令只是拉取远程仓库中最新记录，并不会对你本地仓库进行修改；\n"),_("code",[e._v("git fetch")]),e._v("时会拉取全部的全程分支\n"),_("code",[e._v("git fetch origin remoteBranchName:localBranchName")]),e._v("， 将远程仓库的originBranchName分支拉取到本地的localBranchName\n当远程分支参数为空时 git fetch origin  :xxx 会在本地新建一个xxx分支")]),e._v(" "),_("ul",[_("li",[e._v("从远程仓库拉取某一个分支到本地")])]),e._v(" "),_("p",[e._v("方法1: "),_("code",[e._v("git checkout -b xxx origin/xxx")]),e._v("，就可以在本地检出xxx分支并跟踪远程分支xxx")]),e._v(" "),_("p",[e._v("方法2: "),_("code",[e._v("git branch -u origin/xxx xxx")]),e._v("，这样本地分支xxx就可以跟踪远程分支，如果你已经切换到xxx分支那么后面的参数可以省略")]),e._v(" "),_("ul",[_("li",[e._v("git pull的诞生")])]),e._v(" "),_("p",[e._v("本地仓库想要同步远程仓库的更新，fetch后必然要合并，那么也就是"),_("code",[e._v("git merge origin/xxx")]),e._v("\n为了简化这一操作，就有了 "),_("code",[e._v("git pull")])]),e._v(" "),_("p",[e._v("常见场景，周一提交了v1版本的代码，\n周二你的伙伴提交了v2版本的代码，\n当你周三开发好之后你所负责的功能v3想要push时，\n发现你本地的origin/xxx 和远程的 origin/xxx 不一致，此时git仓库并不会允许你提交你，所以需要先拉取代码进行合并才能够提交")]),e._v(" "),_("p",[e._v("解决方法")]),e._v(" "),_("ol",[_("li",[e._v("git pull 就是 git fetch + git merge origin/xxx 的简写，（会在你的git历史中增加一次合并的提交）")]),e._v(" "),_("li",[e._v("git pull --rebase 就是 git fetch + git rebase origin/xxx 的简写")])]),e._v(" "),_("ul",[_("li",[_("p",[e._v("push\n拉取、合并、是自己本地仓库是基于远程仓库最新的提交记录开发完成之后，就可以向远程仓库push你的代码了。\n假如想要提交到指定的远程分支，可以使用\n"),_("code",[e._v("git push origin branchName")]),e._v(" origin是远程仓库的名字，branchName是远程仓库中你想要push的目标分支,同时也是你本地分支的名字，\n那么 当本地分支名字与远程分支名字不一致时，使用以下命令\n"),_("code",[e._v("git push origin localBranchName:remoteBranchName")]),e._v("\n当远程分支参数为空时 git push origin :xxx 的时候，会把远程仓库的xxx分支删除")])]),e._v(" "),_("li",[_("p",[e._v("神奇的rebase\n"),_("code",[e._v("git rebase xxx1")]),e._v(" 将xxx1分支的提交变基到所在的分支\n"),_("code",[e._v("git rebase xxx1 xxx2")]),e._v(" 将xxx1分支的提交变基到xxx2分支，修改的是xxx2分支\n"),_("code",[e._v("git rebase -i")])])])]),e._v(" "),_("p",[e._v("通过视图来更改提交记录\n"),_("code",[e._v("git rebase -i HEAD~num")]),e._v("\n常见场景，某一feature分支上debugger的记录提交太多，不想保留在commits中，通过该命令，\n会在terminal出现一个git log列表，keydown 对应的按钮 可以执行对应的操作")]),e._v(" "),_("ul",[_("li",[e._v("指针HEAD")])]),e._v(" "),_("ol",[_("li",[_("p",[e._v("指向某一个提交\n指针，HEAD默认指向当前分支的最近一次（上一次）提交，通过移动指针HEAD，可以指向某一次提交记录；\n"),_("code",[e._v("git checkout HEAD fed2da64c0efc5293610bdd892f82a58e8cbc5d8")]),e._v("，哈希值可以通过"),_("code",[e._v("git log")]),e._v("查看")])]),e._v(" "),_("li",[_("p",[e._v("相对引用\n使HEAD指向当前提交的父节点，"),_("code",[e._v("git checkout HEAD^")]),e._v("，"),_("code",[e._v("^")]),e._v("表示向上移动一个节点，所以"),_("code",[e._v("git checkout HEAD^^")]),e._v("即父节点的父节点\n向上移动n个节点，推荐你使用"),_("code",[e._v("git checkout HEAD～n")]),e._v(", "),_("code",[e._v("n")]),e._v("的值就是你向上移动的节点数\n记住，每执行一次"),_("em",[e._v("移动HEAD")]),e._v("，指针也会随之移动，不再是你当前分支的最近一次提交记录了。")])]),e._v(" "),_("li",[_("p",[e._v("强制分支移动到某一个节点\n"),_("code",[e._v("git branch -f branchName 节点哈希值")]),e._v(" 也可以 "),_("code",[e._v("git branch -f branchName HEAD～n")]),e._v("，记住 使用"),_("code",[e._v("git branch -f ...")]),e._v("改变的是分支而不是HEAD")])])]),e._v(" "),_("ul",[_("li",[e._v("撤销变更\n"),_("code",[e._v("reset")]),e._v("会改变提交历史，commit遗弃；\n例如"),_("code",[e._v("git reset --mixed")]),e._v("(默认是mixed) 遗弃的是暂存区的commit；\n例如"),_("code",[e._v("git reset --hard")]),e._v("，遗弃的是暂存区的commit，工作区也会回退，遗弃改变的内容；\n例如"),_("code",[e._v("git reset --soft")]),e._v("，暂存区、工作区都不会改变；\n例如"),_("code",[e._v("git reset HEAD~1")]),e._v(" 或者 "),_("code",[e._v("git reset <hash>")]),e._v("取消上一次commit或某一次的提交，\n对于本地分支（没有被push的commit）而言，使用"),_("code",[e._v("reset")]),e._v("就可以把提交历史抹掉；")])]),e._v(" "),_("p",[_("code",[e._v("revert")]),e._v(" 会「增加一段抹掉的历史的历史」，例如提交&push了c1版本，"),_("code",[e._v("revert")]),e._v("后会在提交的时间线上增加"),_("code",[e._v("c1‘")]),e._v("，对于内容而言和"),_("code",[e._v("reset")]),e._v("一致，区别在于提交历史的表现不同")]),e._v(" "),_("ul",[_("li",[e._v("cherry-pick\n"),_("code",[e._v("git cherry-pick {num}^")]),e._v(" 将指定的提交移动复制到当前分支上，可以复制多个以空格隔开")])])])}),[],!1,null,null,null);v.default=t.exports}}]);